(function (vega, vegaLite, vl, vegaTooltip, d3) {
  'use strict';

  vega = vega && Object.prototype.hasOwnProperty.call(vega, 'default') ? vega['default'] : vega;
  vegaLite = vegaLite && Object.prototype.hasOwnProperty.call(vegaLite, 'default') ? vegaLite['default'] : vegaLite;
  vl = vl && Object.prototype.hasOwnProperty.call(vl, 'default') ? vl['default'] : vl;

  // Appearance customization to improve readability.
  // See https://vega.github.io/vega-lite/docs/
  const dark = '#3e3c38';
  const config = {
    axis: {
      domain: false,
      tickColor: 'lightGray'
    },
    style: {
      "guide-label": {
        fontSize: 20,
        fill: dark
      },
      "guide-title": {
        fontSize: 30,
        fill: dark
      }
    }
  };

  const csvUrl1 = 'https://gist.githubusercontent.com/curran/8c131a74b85d0bb0246233de2cff3f52/raw/194c2fc143790b937c42bf086a5a44cb3c55340e/auto-mpg.csv';
  const csvUrl2 = 'https://gist.githubusercontent.com/curran/90240a6d88bdb1411467b21ea0769029/raw/7d4c3914cc6a29a7f5165f7d5d82b735d97bcfe4/week_temperature_sf.csv';

  const getData1 = async () => {
    const data = await d3.csv(csvUrl1);
    return data;
  };


  const getData2 = async () => {
    const data = await d3.csv(csvUrl2);
    return data;
  };

  const viz1 = vl
    .markCircle({
      size: 900,
      opacity: 0.5,
    })
    .encode(
      vl.x().fieldQ('mpg').scale({ zero: false }),
      vl
        .y()
        .fieldQ('horsepower')
        .scale({ zero: false }),
      vl.color().fieldN('origin'),
      vl.size().fieldQ('horsepower'),
      vl.tooltip().fieldN('name')
    );

  const viz2 = vl
    .markCircle({
      size: 900,
      opacity: 0.5,
    })
    .encode(
      vl
        .x()
        .fieldQ('weight')
        .scale({ zero: false }),
      vl
        .y()
        .fieldQ('horsepower')
        .scale({ zero: false }),
      vl.color().fieldQ('weight'),
      vl.size().fieldQ('mpg'),
      vl.tooltip().fieldN('name')
    );

  const viz3 = vl
    .markPoint({
      fill: true,
      stroke: false,
      size: 900,
      opacity: 0.1,
    })
    .encode(
      vl
        .x()
        .fieldQ('displacement')
        .scale({ zero: false }),
      vl
        .y()
        .fieldQ('horsepower')
        .scale({ zero: false }),
      vl.tooltip().fieldN('name')
    );

  const viz4 = vl
    .markPoint()
    .encode(
      vl
        .x()
        .fieldQ('acceleration')
        .scale({ zero: false }),
      vl
        .y()
        .fieldQ('horsepower')
        .scale({ zero: false }),
      vl.tooltip().fieldN('name')
    );

  const viz = vl
    .markLine({
      size: 5,
      opacity: 1,
    })
    .encode(
      vl.x().fieldT('timestamp').scale({ zero: false }),
      vl
        .y()
        .fieldQ('temperature')
        .scale({ zero: false }),
      vl.tooltip().fieldN('temperature')
    );

  const viz5 = vl
    .markCircle({
      size: 50,
      opacity: 1,
    })
    .encode(
      vl.x().fieldT('timestamp').scale({ zero: false }),
      vl
        .y()
        .fieldQ('temperature')
        .scale({ zero: false }),
      vl.tooltip().fieldN('temperature')
    );

  vl.register(vega, vegaLite, {
    view: { renderer: 'svg' },
    init: (view) => {
      view.tooltip(new vegaTooltip.Handler().call);
    },
  });
  const chart1 = document.getElementById(
    'first-chart'
  );
  const chartWidth = chart1.clientWidth - 100;
  const chartHeight = innerHeight - 50;
  const run = async () => {
    const marks = viz1
      .data(await getData1())
      .width(chartWidth)
      .height(chartHeight)
      .autosize({
        type: 'fit',
        contains: 'padding',
      })
      .config(config);

    const marks2 = viz2
      .data(await getData1())
      .width(chartWidth)
      .height(chartHeight)
      .autosize({
        type: 'fit',
        contains: 'padding',
      })
      .config(config);

    const marks3 = viz3
      .data(await getData1())
      .width(chartWidth)
      .height(chartHeight)
      .autosize({
        type: 'fit',
        contains: 'padding',
      })
      .config(config);

    const marks4 = viz4
      .data(await getData1())
      .width(chartWidth)
      .height(chartHeight)
      .autosize({
        type: 'fit',
        contains: 'padding',
      })
      .config(config);

    const marks5 = viz5
      .data(await getData2())
      .width(chartWidth)
      .height(chartHeight)
      .autosize({
        type: 'fit',
        contains: 'padding',
      })
      .config(config);

    chart1.appendChild(await marks.render());
    chart1.appendChild(await marks5.render());
    chart1.appendChild(await marks2.render());
    chart1.appendChild(await marks3.render());
    chart1.appendChild(await marks4.render());
  };
  run();

}(vega, vegaLite, vl, vegaTooltip, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,